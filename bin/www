#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('workspace:server');
var path = require('path');
var fs = require('fs');
var http = require('http');
var https = require('https');
var config = require('../config.js');

var port = normalizePort(process.env.PORT || config.express.port);
app.set('port', port);

var server = https.createServer({
    key: fs.readFileSync(path.join(__dirname, config.ssl.key)),
    cert: fs.readFileSync(path.join(__dirname, config.ssl.cert)),
    ca: [fs.readFileSync(path.join(__dirname, config.ssl.ca_1)), fs.readFileSync(path.join(__dirname, config.ssl.ca_2)), fs.readFileSync(path.join(__dirname, config.ssl.ca_3))]
}, app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port))
    return val;
  if (port >= 0)
    return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen')
    throw error;
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var redirectionServer = http.createServer(function(req, res) {
    res.writeHead(302, {
        'Location': config.host.https_baseurl + req.url
    });
    res.end();
});

redirectionServer.listen(80);